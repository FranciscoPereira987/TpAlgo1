abrir_archivos,(l_ar_entrada),mezcla,    l_manejadores = [],    for ruta in l_ar_entrada:,        l_manejadores.append(open(ruta, "r"))
agregar_separador,(texto),reuti_codigo,    cantidad = texto.find('\n'),    texto += '_' * cantidad + '\n'
analizar_codigo,(codigo/ diccionario/ nombre_funcion),reuti_codigo,    for linea in codigo:,            revisar_llamadas(diccionario, linea, nombre_funcion)
cerrar_archivos,(archivos),mezcla,    for archivo in archivos:,        archivo.close()
devolver_clave_minima,(lista/ pos_clave),mezcla,
devolver_parametros,(linea),ordenamiento,    indice_inicio = linea.find('('),    ultimo_indice = linea.find(')') + 1,    parametros = linea[indice_inicio:ultimo_indice].replace(',', '/')
fin_funcion,(linea),sep_cod_com,
generar_puntajes,(archivo_codigo/ diccionario),reuti_codigo,    linea = leer_linea_archivo(archivo_codigo),    while linea != ['']:,        funcion = f'{linea[2]}.{linea[0]}',        analizar_codigo(linea[3:], diccionario, funcion),        linea = leer_linea_archivo(archivo_codigo)
generar_texto_encolumnado,(ancho_columna/ texto),reuti_codigo,    longitud_texto = len(texto),    if longitud_texto > ancho_columna:,        columna = texto[:ancho_columna] + '|',        texto = texto[ancho_columna:],    else:,        espacios = " " * (ancho_columna - longitud_texto) + '|',        columna = texto + espacios,        texto = ""
identificar_alfabeticamente,(nombre_actual/ nombre_maximo/ nombre_minimo),ordenamiento,
identificar_comentarios,(linea/ comentado_multi),sep_cod_com,    comentarios = '',    forma_de_comentar = '',    if chr(35) in linea: ,        comentarios = comentarios + linea[linea.find(chr(35)):],        linea = linea[:linea.find(chr(35))],    elif linea.count("\"\"\"") == 2:,        comentarios = linea[linea.find("\"\"\""):],        linea = linea[:linea.find("\"\"\"")],    elif linea.count("\'\'\'") == 2:,        comentarios = linea[linea.find("\'\'\'"):],        linea = linea[:linea.find("\'\'\'")] +'\n',    elif linea.count("\"\"\"") == 1:  ,        comentado_multi = not comentado_multi  ,        forma_de_comentar = "\"\"\"",    elif linea.count("\'\'\'") == 1:,        comentado_multi = not comentado_multi  ,        forma_de_comentar = "\'\'\'"
identificar_funciones,(linea),ordenamiento,
lector_rutas,(archivo_rutas/ ruta_py = False),ordenamiento,    ruta = archivo_rutas.readline(),    if ruta:,        if ruta_py:,            modulo = nombre_modulo(ruta),        else:,            modulo = "",        ruta = ruta.rstrip('\n'),        archivo = open(ruta, 'r'),    else:,        archivo = modulo = ""
leer_archivos,(l_manejadores),mezcla,    l_lineas = [],    for manejador in l_manejadores:,        l_lineas.append(manejador.readline().rstrip('\n').split(','))
leer_funcion,(archivo),sep_cod_com,    l_lineas = [],    l_comentarios = [],    comentado_multi = False ,    fin = False,    linea, comentado_multi, comentarios, forma_de_comentar = leer_linea(archivo, comentado_multi),    while not fin and linea:,        if comentado_multi:,            comentarios = linea ,            linea = archivo.readline() ,            while forma_de_comentar  not in linea:,                comentarios = comentarios + linea ,                linea = archivo.readline(),            comentarios = comentarios + linea ,            comentado_multi = False ,            linea = '' ,        if linea.rstrip() != "": ,            l_lineas.append(linea.strip('\n')),        if comentarios != "": ,            l_comentarios.append(comentarios.strip('\n')),        linea, comentado_multi, comentarios, forma_de_comentar = leer_linea(archivo, comentado_multi),        fin = fin_funcion(linea)
leer_linea,(archivo/ comentado_multi),sep_cod_com,    linea = archivo.readline(),    linea, comentado_multi, comentarios, forma_de_comentar = \,    identificar_comentarios(linea, comentado_multi)
leer_linea_archivo,(archivo),reuti_codigo,
lista_a_string,(l_codigo/ l_comentarios),ordenamiento,    str_codigo = ','.join(l_codigo),    str_comentarios = ','.join(l_comentarios)
main,(),reuti_codigo,    archivo_codigo = open('salidaPrueba0.csv', 'r'),    lista_funciones = armar_lista(archivo_codigo),    dicc_funciones = armar_diccionario(lista_funciones),    archivo_codigo.seek(0),    generar_puntajes(archivo_codigo, dicc_funciones),    funciones_que_llaman(dicc_funciones),    for funcion in dicc_funciones:,        print(funcion,'-->',dicc_funciones[funcion]),    archivo_codigo.close(),    escribir_archivo(dicc_funciones, 20, 3),if __name__ == "__main__":,    generar_analizador()
main_ordenamiento,(),ordenamiento,    rutas  = open("programas.txt", 'r'),    rutas_comentarios, rutas_codigo = manejar_archivos(rutas),    rutas.seek(0),    archivo_rutas, nombre_modulo = lector_rutas(rutas, True),    while archivo_rutas:,        procesar_entrada(archivo_rutas, rutas_codigo, rutas_comentarios, nombre_modulo),        archivo_rutas, nombre_modulo = lector_rutas(rutas, True),    mezcla.cerrar_archivos([rutas, rutas_codigo, rutas_comentarios])
main_prueba,(),ordenamiento,    archivo_rutas = open("programas.txt", 'r'),    archivo_prueba, modulo = lector_rutas(archivo_rutas, True),    numero = 0,    while archivo_prueba:,        archivo_salida_com = open(f"comentarios{numero}.csv", 'w'),        archivo_salida_cod = open(f"codigo{numero}.csv", 'w'),        ordenar_funciones(archivo_prueba, archivo_salida_cod, archivo_salida_com, modulo),        mezcla.cerrar_archivos([archivo_prueba,archivo_salida_cod, archivo_salida_com]),        archivo_prueba, modulo = lector_rutas(archivo_rutas, True),        numero += 1
main_sep,(),sep_cod_com,    ruta = input("Ingrese la ruta a un archivo de python:\n"),    linea, lineas, comentarios = leer_funcion(ruta),    print("Estos son lineas de codigo"),    for i in lineas:,        print(i),    print("Estos son comentarios")    ,    for i in comentarios:,        print(i),    print(lineas,comentarios),if __name__ == "__main__":,    main_sep()
manejar_archivos,(archivo_rutas),ordenamiento,    numero = 0,    ruta = archivo_rutas.readline(),    rutas_comentarios = open("rutas_comentarios.txt", 'w'),    rutas_codigo = open("rutas_codigo.txt", 'w'),    while ruta:,        rutas_comentarios.write(f"comentarios_{numero}.csv\n"),        rutas_codigo.write(f"codigo_{numero}.csv\n"),        numero += 1,        ruta = archivo_rutas.readline(),    mezcla.cerrar_archivos([rutas_comentarios, rutas_codigo])
mezclar_archivos,(l_ar_entrada/ t_ar_salida/ clave_pos),mezcla,    l_manejadores = abrir_archivos(l_ar_entrada),    l_lineas = leer_archivos(l_manejadores),    pos_min, l_min = devolver_clave_minima(l_lineas, 0),    ar_salida = open(t_ar_salida, "w"),    while pos_min != -1:,        ar_salida.write(",".join(l_lineas[pos_min]) + "\n"),        l_lineas[pos_min] = l_manejadores[pos_min].readline().rstrip('\n').split(","),        pos_min, l_min = devolver_clave_minima(l_lineas, 0),    cerrar_archivos(l_manejadores + [ar_salida])
nombre_funcion,(linea),ordenamiento,    indice_max = linea.find("("),    indice_min = linea.find(" ") + 1,    nombre = linea[indice_min:indice_max]
nombre_modulo,(linea),ordenamiento,    ultimo_indice = linea.find(".py"),    primer_indice = len(linea) - linea[::-1].find("\\")
ordenar_funciones,(archivo_entrada/ archivo_salida_cod/ archivo_salida_com/ nombre_modulo),ordenamiento,    nombre_anterior = 'aaaaaaaa',    nombre_anterior, parametros, l_cod, l_com =\,    recorrer_archivo(archivo_entrada, nombre_anterior),    l_cod, l_com = lista_a_string(l_cod, l_com),    while nombre_anterior != MAX_NOMBRE:,        linea_cod = f"{nombre_anterior},{parametros},{nombre_modulo}," + l_cod + '\n',        linea_com = f"{nombre_anterior}," + l_com + '\n',        archivo_salida_cod.write(linea_cod),        archivo_salida_com.write(linea_com),        nombre_anterior, parametros, l_cod, l_com = \,        recorrer_archivo(archivo_entrada, nombre_anterior),        l_cod, l_com = lista_a_string(l_cod, l_com) 
procesar_entrada,(archivo_entrada/ rutas_codigo/ rutas_com/ nombre_modulo),ordenamiento,    archivo_comentarios, mod_false = lector_rutas(rutas_com),    archivo_codigo, mod_false = lector_rutas(rutas_codigo) ,    ordenar_funciones(archivo_entrada, archivo_codigo, archivo_comentarios, nombre_modulo),    mezcla.cerrar_archivos([archivo_codigo, archivo_comentarios])
recorrer_archivo,(archivo_entrada/ nombre_anterior),ordenamiento,    linea = archivo_entrada.readline(),    nombre_maximo = MAX_NOMBRE,    parametros = l_cod = l_com = '',    while linea:,        if identificar_funciones(linea):,            nombre = nombre_funcion(linea),            if identificar_alfabeticamente(nombre, nombre_maximo, nombre_anterior):,                parametros = devolver_parametros(linea),                linea, l_cod, l_com = sep_cod_com.leer_funcion(archivo_entrada) ,                nombre_maximo = nombre,            else:,                linea = archivo_entrada.readline(),        else:,            linea = archivo_entrada.readline(),    archivo_entrada.seek(0)
revisar_llamadas,(diccionario_funciones/ linea/ nombre_funcion_actual),reuti_codigo,    claves = list(diccionario_funciones.keys()),    indice = 1,    indice_punto = claves[0].find('.') + 1,    funcion = claves[0][indice_punto:],    while (funcion not in linea) and indice < (len(claves)):,        indice_punto = claves[indice].find('.') + 1,        funcion = claves[indice][indice_punto:],        indice += 1,    if funcion in linea:,        funcion = (claves[indice-1]),        diccionario_funciones[nombre_funcion_actual][funcion] += 1
